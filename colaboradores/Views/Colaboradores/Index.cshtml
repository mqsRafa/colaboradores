@using colaboradores.ViewModels
@model ColaboradorViewModel
@{
    ViewData["Title"] = "Colaboradores";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        .col-3, .col-6 {
            height: 100%;
            max-height: calc(100vh - 165px);
            overflow-y: auto;
        }

        .list-group-item {
            cursor: pointer;
        }

        .col-6 form {
            max-height: calc(100vh - 270px);
            overflow-y: auto;
            padding-right: 10px;
            box-sizing: content-box;
        }

        .btn-fixed-bottom {
            margin-bottom: 10px;
        }
    </style>
    <script>
        var estaEditando = false;

        document.addEventListener("DOMContentLoaded", function () {
            // Adiciona eventos de alteração para os campos
            document.getElementById("nomeColaborador").addEventListener("input", function () {
                estaEditando = true;
            });

            document.getElementById("idCargoColaborador").addEventListener("change", function () {
                estaEditando = true;
            });

            document.getElementById("idDepartamentoColaborador").addEventListener("change", function () {
                estaEditando = true;
            });
        });

        function carregarInformacoes(id, nome, cargo, departamento, empresas) {

            if (estaEditando) {
                var resultado = window.confirm("As alterações no cadastro serão perdidas. Deseja continuar?");

                if (!resultado) {
                    return;
                }
            }

            estaEditando = false;

            document.getElementById("idColaborador").value = id;
            document.getElementById("nomeColaborador").value = nome;
            document.getElementById("idCargoColaborador").value = cargo;
            document.getElementById("idDepartamentoColaborador").value = departamento;

            var listaEmpresas = document.getElementById("listaEmpresas");

            // Limpa a lista de empresas antes de adicionar novas
            listaEmpresas.innerHTML = "";

            // Itera sobre o array de empresas e monta a lista
            empresas.forEach(function (empresa) {
                var li = document.createElement("li");
                li.classList.add("list-group-item");
                li.textContent = empresa.nome; // Define o nome da empresa
                li.setAttribute("data-id", empresa.id); // Atribui o ID como atributo

                // Cria o botão de remover
                var botaoRemover = document.createElement("button");
                botaoRemover.classList.add("btn", "btn-danger", "btn-sm", "float-end", "ms-2");
                botaoRemover.textContent = "Remover";
                botaoRemover.onclick = function () {
                    removerEmpresa(id, empresa.id);
                };

                // Adiciona o botão ao item da lista
                li.appendChild(botaoRemover);

                // Adiciona o item à lista de empresas
                listaEmpresas.appendChild(li);
            });

            // Ordena a lista de empresas por ordem alfabética
            ordenarLista();

            document.getElementById("listaEmpresas").value = listaEmpresas;
        }

        function novoCadastro() {
            if (estaEditando) {
                var resultado = window.confirm("As alterações no cadastro serão perdidas. Deseja continuar?");

                if (!resultado) {
                    return;
                }
            }

            const campos = ["idColaborador", "nomeColaborador", "idCargoColaborador", "idDepartamentoColaborador"];
            campos.forEach(campo => document.getElementById(campo).value = "");
            listaEmpresas.innerHTML = '';
        }

        function cancelarEdicao() {
            var idColaborador = document.getElementById("idColaborador").value;

            if (idColaborador > 0) {
                location.reload(true);
            }
        }


        async function removerEmpresa(colaboradorId, empresaId) {
            // Obtém os elementos necessários do DOM
            var listaEmpresas = document.getElementById("listaEmpresas");
            var empresaParaRemover = listaEmpresas.querySelector('[data-id="' + empresaId + '"]');

            // Verifica se a empresa existe na lista
            if (empresaParaRemover) {
                listaEmpresas.removeChild(empresaParaRemover);
                estaEditando = true;
            } else {
                alert("A empresa não está associada ao colaborador.");
            }
        }

        // Função para adicionar empresa à lista
        async function adicionarEmpresa() {
            var colaboradorId = document.getElementById("idColaborador").value;
            var empresaSelecionada = document.getElementById("empresaSelecionada").value;
            var nomeEmpresa = document.getElementById("empresaSelecionada").options[document.getElementById("empresaSelecionada").selectedIndex].text;
            var listaEmpresas = document.getElementById("listaEmpresas");

            // Verifica se uma empresa foi selecionada e se o colaboradorId é válido
            if (!empresaSelecionada) {
                alert("Selecione uma empresa.");
                return;
            }

            // Verifica se a empresa já foi adicionada
            if (!document.querySelector('[data-id="' + empresaSelecionada + '"]')) {
                // Cria o item de lista para a empresa
                var li = document.createElement("li");
                li.classList.add("list-group-item");
                li.textContent = nomeEmpresa;
                li.setAttribute("data-id", empresaSelecionada);

                // Cria o botão de remover
                var botaoRemover = document.createElement("button");
                botaoRemover.classList.add("btn", "btn-danger", "btn-sm", "float-end", "ms-2");
                botaoRemover.textContent = "Remover";
                botaoRemover.onclick = function () {
                    removerEmpresa(colaboradorId, empresaSelecionada);  // Passa o colaboradorId e empresaSelecionada
                };

                // Adiciona o botão ao item da lista
                li.appendChild(botaoRemover);

                // Adiciona o item na lista
                listaEmpresas.appendChild(li);

                // Ordena a lista de empresas por ordem alfabética
                ordenarLista();
                estaEditando = true;
            } else {
                alert("A empresa já foi associada a este colaborador.");
            }
        }

        // Função para ordenar a lista de empresas (alfabeticamente)
        function ordenarLista() {
            var listaEmpresas = document.getElementById("listaEmpresas");
            var itens = Array.from(listaEmpresas.getElementsByTagName("li"));

            // Ordena os itens da lista alfabeticamente
            itens.sort(function (a, b) {
                var nomeA = a.textContent.toLowerCase();
                var nomeB = b.textContent.toLowerCase();
                return nomeA.localeCompare(nomeB);
            });

            // Remove todos os itens da lista para reordenar
            listaEmpresas.innerHTML = '';

            // Adiciona os itens ordenados de volta à lista
            itens.forEach(function (item) {
                listaEmpresas.appendChild(item);
            });
        }

        async function excluirColaborador() {

            var idColaborador = document.getElementById("idColaborador").value;

            if (idColaborador > 0) {
                var resultado = window.confirm("Deseja excluir o colaborador selecionado?");

                if (!resultado) {
                    return;
                }

                var request = {
                    IdColaborador: parseInt(idColaborador)
                };

                try {
                    // Chama o servidor para salvar os dados do colaborador
                    const response = await fetch('/Colaboradores/ExcluirColaborador', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(request), // Envia o objeto request no corpo da requisição
                    });

                    // Processa a resposta do servidor
                    const result = await response.json();

                    if (result.success) {
                        location.reload(true);
                    } else {
                        alert(result.message || "Erro ao excluir dados no servidor.");
                    }

                    estaEditando = false;
                } catch (error) {
                    console.error("Erro ao conectar com o servidor:", error);
                    alert("Não foi possível excluir os dados.");
                }
            }
        }

        async function salvarColaborador() {
            // Obtém os valores dos elementos DOM
            var idColaborador = document.getElementById("idColaborador").value;
            var nomeColaborador = document.getElementById("nomeColaborador").value;
            var idCargoColaborador = document.getElementById("idCargoColaborador").value;
            var idDepartamentoColaborador = document.getElementById("idDepartamentoColaborador").value;

            if (nomeColaborador == "") {
                alert("Informe o nome do colaborador!");
                return;
            }

            // Seleciona todos os itens de empresas
            var listaEmpresas = document.querySelectorAll('.list-group-item');

            // Cria um array para armazenar os IDs das empresas
            var listaEmpresasIds = [];

            // Itera sobre cada item em listaEmpresas e extrai o 'data-id'
            listaEmpresas.forEach(function (empresaItem) {
                var empresaId = empresaItem.getAttribute('data-id');
                if (empresaId) {
                    listaEmpresasIds.push(parseInt(empresaId)); // Adiciona o ID da empresa no array
                }
            });

            // Cria o objeto request com os valores extraídos
            var request = {
                IdColaborador: parseInt(idColaborador), // Garante que o ID seja um número
                NomeColaborador: nomeColaborador,
                IdCargoColaborador: parseInt(idCargoColaborador), // Garante que o ID do cargo seja um número
                IdDepartamentoColaborador: parseInt(idDepartamentoColaborador), // Garante que o ID do departamento seja um número
                ListaEmpresas: listaEmpresasIds // Lista dos IDs das empresas
            };

            try {
                // Chama o servidor para salvar os dados do colaborador
                const response = await fetch('/Colaboradores/SalvarColaborador', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(request), // Envia o objeto request no corpo da requisição
                });

                // Processa a resposta do servidor
                const result = await response.json();

                if (result.success) {
                    location.reload(true);
                } else {
                    alert(result.message || "Erro ao salvar dados no servidor.");
                }

                estaEditando = false;
            } catch (error) {
                console.error("Erro ao conectar com o servidor:", error);
                alert("Não foi possível salvar os dados.");
            }
        }

    </script>
</head>
<body>
    <div class="container-fluid mt-5">
        <div class="row">
            <!-- Caixa de Listagem -->
            <div class="col-3 border-end">
                <h3>Colaboradores</h3>
                <div class="list-group">
                    @foreach (var colaborador in Model.Colaboradores)
                    {
                        var listaEmpresas = Newtonsoft.Json.JsonConvert.SerializeObject(
                        colaborador.Empresas.Select(e => new
                        {
                            id = e.IdEmpresa,
                            nome = e.NomeFantasiaEmpresa
                        })
                        );

                        <button class="list-group-item list-group-item-action"
                                onclick='carregarInformacoes(
                                    @colaborador.IdColaborador,
                                    "@colaborador.NomeColaborador",
                                    "@colaborador.IdCargoColaborador",
                                    "@colaborador.IdDepartamentoColaborador",
                                    @Html.Raw(listaEmpresas.Replace("'", "\\'"))
                                )'>
                            @colaborador.NomeColaborador
                        </button>
                    }
                </div>
                <!-- Botões Novo e Excluir -->
                <button class="btn btn-success mt-3 w-100 btn-fixed-bottom" onclick="novoCadastro()">Novo</button>
                <button class="btn btn-danger w-100 btn-fixed-bottom" onclick="excluirColaborador()">Excluir</button>
            </div>

            <!-- Formulário de Colaborador e Empresas -->
            <div class="col-6">
                <h3>Informações do Colaborador</h3>
                <form>
                    <div class="mb-3">
                        <label for="idColaborador" class="form-label">ID</label>
                        <input type="text" class="form-control" id="idColaborador" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="nomeColaborador" class="form-label">Nome</label>
                        <input type="text" class="form-control" id="nomeColaborador" maxlength="40">
                    </div>
                    <div class="mb-3">
                        <label for="idCargoColaborador" class="form-label">Cargo</label>
                        <select class="form-control" id="idCargoColaborador">
                            <option value="" disabled selected>Selecione o cargo</option>
                            <option value="1">Analista</option>
                            <option value="2">Auxiliar</option>
                            <option value="3">Diretor</option>
                            <option value="4">Estagiário</option>
                            <option value="5">Gerente</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="idDepartamentoColaborador" class="form-label">Departamento</label>
                        <select class="form-control" id="idDepartamentoColaborador">
                            <option value="" disabled selected>Selecione o departamento</option>
                            <option value="1">Administrativo</option>
                            <option value="2">Compras</option>
                            <option value="3">Financeiro</option>
                            <option value="4">TI</option>
                            <option value="5">Vendas</option>
                        </select>
                    </div>
                </form>
                <!-- Botões Salvar e Cancelar -->
                <div class="d-flex gap-3">
                    <button class="btn btn-primary mt-3 w-50" onclick="salvarColaborador()">Salvar</button>
                    <button class="btn btn-secondary mt-3 w-50" onclick="cancelarEdicao()">Cancelar</button>
                </div>
            </div>

            <!-- Caixa de Empresas -->
            <div class="col-3">
                <h3>Empresas Associadas</h3>
                <div class="mb-3">
                    <label for="empresaSelecionada" class="form-label">Selecionar Empresa</label>
                    <select class="form-select" id="empresaSelecionada">
                        <option value="" selected>Escolha uma empresa</option>
                        @foreach (var empresa in Model.Empresas)
                        {
                            <option value="@empresa.IdEmpresa">@empresa.NomeFantasiaEmpresa</option>
                        }
                    </select>
                </div>
                <button class="btn btn-success w-100" onclick="adicionarEmpresa()">Adicionar</button>
                <h4 class="mt-3">Vínculos</h4>
                <ul id="listaEmpresas" class="list-group mt-2">
                    <!-- Empresas adicionadas aparecerão aqui -->
                </ul>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
